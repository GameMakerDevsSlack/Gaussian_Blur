<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blur_range=25

surf_pre_blur=surface_create(1280,720)//this is the image where you draw, can alos be view_surface_id ;) and is blurred hor/ver
surf_post_blur=surface_create(1280,720)//the first blur target will be drawn in this surface and will be blurred again ver/hor
surf_factor=surface_create(1280,720)//this is the factor where you draw things red that you want to be blurry, 
                                    //if you dont like having lots of screen sized surfaces you can decrease this one's size

uni_blur_range_h=shader_get_uniform(shd_blur_hor, "blur_range");
uni_blur_range_v=shader_get_uniform(shd_blur_ver, "blur_range");

sample_factor_h=shader_get_sampler_index(shd_blur_hor,"surface_factor")
sample_factor_v=shader_get_sampler_index(shd_blur_ver,"surface_factor")

mpx=0
mpy=0

hp=10
game_over=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rand=irandom(60)
if rand=30{instance_create(1280*0.5,720*0.5,obj_rocket)}

surface_set_target(surf_pre_blur)//draw here the original stuff
draw_clear_alpha(0,0)
draw_background(back_landscape,0,0)
if hp&gt;0{draw_sprite(spr_gabranth,0,mouse_x,mouse_y)}
draw_sprite_ext(spr_jsf,0,1280*0.5,720*0.5,1,1,point_direction(1280*0.5,720*0.5,mouse_x,mouse_y)+90,c_white,1)
rockets=instance_number(obj_rocket)
if rockets&gt;0
    {
    for (i=0;i&lt;rockets;i++)
        {
        r=instance_find(obj_rocket,i)
        if r.life&gt;0
            {
            draw_sprite_ext(spr_rocket,0,r.x,r.y,1,1,r.direction,c_white,1)
            draw_set_blend_mode(bm_add)
            draw_sprite_ext(spr_rocket,1,r.x,r.y,r.rand,1,r.direction,c_white,1)
            draw_set_blend_mode(bm_normal)
            }
        else
            {
            draw_set_blend_mode(bm_add)
            draw_sprite_ext(spr_explosion,0,r.x,r.y,(r.life)/30,(r.life)/30,r.life*2,c_white,1)
            draw_set_blend_mode(bm_normal)
            }
        }
    }
surface_reset_target()

surface_set_target(surf_factor)//draw red things to make stuff blurry you want
draw_clear_alpha(0,0)
draw_set_blend_mode(bm_add)
if hp&gt;0{draw_sprite_ext(spr_gabranth,1,mouse_x,mouse_y,1,1,0,c_white,point_distance(mpx,mpy,mouse_x,mouse_y)/10)}
if mpx!=mouse_x{mpx=mouse_x}if mouse_y!=mpy{mpy=mouse_y}
draw_sprite_ext(spr_jsf,1,1280*0.5,720*0.5,1,1,point_direction(1280*0.5,720*0.5,mouse_x,mouse_y)+90,c_white,1)
draw_rectangle_colour(0,720-200,1280,720,c_red,c_red,c_red,c_red,0)
rockets=instance_number(obj_rocket)
if rockets&gt;0
    {
    for (i=0;i&lt;rockets;i++)
        {
        r=instance_find(obj_rocket,i)
        if r.life&gt;0
            {
            draw_set_blend_mode(bm_add)
            draw_set_blend_mode(bm_add)draw_sprite_ext(spr_rocket,2,r.x,r.y,r.rand,1,r.direction,c_white,1)
            draw_set_blend_mode(bm_normal)
            }            
        else
            {
            draw_set_blend_mode(bm_add)
            draw_sprite_ext(spr_explosion,1,r.x,r.y,(r.life)/7.5,(r.life)/7.5,r.life*2,make_colour_hsv(0,255,255+(r.life*8.5)),1)
            draw_set_blend_mode(bm_normal)
            }
        }
    }
draw_set_blend_mode(bm_normal)
if hp&lt;1
{
game_over++
if game_over&lt;64{col=make_colour_hsv(0,0,game_over*4)}
if game_over&gt;=64&amp;&amp;game_over&lt;64+75{blur_range++}
draw_set_blend_mode(bm_add)
draw_rectangle_colour(0,0,1280,720,col,col,col,col,0)
draw_set_blend_mode(bm_normal)
if game_over&gt;64+75+150{hp=10 game_over=0 blur_range=25}
}
surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0;i&lt;10;i++)
    {
    h=0 if hp&lt;=i{h=1}
    draw_sprite(spr_heart,h,10+38*i,10)
    }
if game_over&gt;0
    {
    draw_sprite_ext(spr_game_over,0,0,360,5,clamp(game_over/30,0,5),0,c_white,1)
    draw_sprite_ext(spr_game_over,1,0,360,5,5,0,c_white,clamp(game_over/120,0,1))
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(surf_post_blur)
draw_clear_alpha(0,0)
shader_set(shd_blur_ver)
texture_set_stage(sample_factor_v, surface_get_texture(surf_factor))
shader_set_uniform_f(uni_blur_range_v,blur_range);
draw_surface(surf_pre_blur,0,0)
shader_reset()
surface_reset_target()

shader_set(shd_blur_hor)
texture_set_stage(sample_factor_h, surface_get_texture(surf_factor))
shader_set_uniform_f(uni_blur_range_h,blur_range);
draw_surface(surf_post_blur,0,0)
shader_reset()
//you can swap shd_blur_ver and shd_blur_hor if you wish.

//draw_surface(surf_factor,0,0) 
//use this if you want to debug your red surface
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
